package com.huimi.core.po.user;import com.fasterxml.jackson.annotation.JsonFormat;import com.huimi.common.baseMapper.GenericPo;import com.huimi.core.po.system.Admin;import io.swagger.annotations.ApiModel;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Column;import javax.persistence.Table;import javax.persistence.Transient;import java.util.Date;import java.util.HashMap;import java.util.Map;@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "用户表")@Table(name = "users")public class Users extends GenericPo<Integer> {	public static final String TABLE_NAME = "users";	/**	 * 版本	 */	@Column(name = "version")	private Integer version;	/**	 * 上级id	 */	@Column(name = "parent_id")	private Integer parentId;	/**	 * 邀请码	 */	@Column(name = "invite_code")	private String inviteCode;	/**	 * 代理商邀请码	 */	@Column(name = "type")	private Integer type;	/**	 * 微信openId	 */	@Column(name = "wechat_open_id")	private Long wechatOpenId;	/**	 * 手机号	 */	@Column(name = "phone")	private String phone;	/**	 * 用户名	 */	@Column(name = "user_name")	private String userName;	/**	 * 昵称	 */	@Column(name = "nick_name")	private String nickName;	/**	 * 真实姓名	 */	@Column(name = "real_name")	private String realName;	/**	 * 密码	 */	@Column(name = "password")	private String password;	/**	 * 密码盐	 */	@Column(name = "salt")	private String salt;	/**	 * 性别	 */	@Column(name = "sex")	private Integer sex;	/**	 * 头像地址	 */	@Column(name = "avatar_url")	private String avatarUrl;	/**	 * 邮件	 */	@Column(name = "email")	private String email;	/**	 * 最后登录时间	 */	@Column(name = "`last_login_date`")	@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")	private Date lastLoginDate;	/**	 * 登录失败次数	 */	@Column(name = "`login_fail_count`")	private Integer loginFailCount;	/**	 * 最后登录ip	 */	@Column(name = "`last_login_ip`")	private String lastLoginIp;	/**	 * 用户类型	 */	@Transient	private String typeStr;	/**	 * 性别	 */	@Transient	private String sexStr;	public String getTypeStr() {		return TYPE.getValue(this.type);	}	public String getSexStr() {		return SEX.getValue(this.sex);	}	/**	 * 1,普通用户:general<br>2,基金经理:amaldar	 **/	public enum TYPE {		/**		 * 1,普通用户:general		 **/		GENERAL("普通用户", 1),		/**		 * 2,基金经理:amaldar		 **/		AMALDAR("基金经理", 2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private TYPE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.code == code) {					return type.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value || "".equals(value)) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.value.equals(value)) {					return type.code;				}			}			return null;		}		public static Map<Integer, String> getEnumMap() {			if (map.size() == 0) {				for (TYPE type : TYPE.values()) {					map.put(type.code, type.value);				}			}			return map;		}	}	/**	 * 1,境内:domestic<br>2,境外:abroad	 **/	public enum COUNTRY {		NO("暂无", 0),		/**		 * 1,境内:domestic		 **/		DOMESTIC("境内", 1),		/**		 * 2,境外:abroad		 **/		ABROAD("境外", 2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private COUNTRY(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (COUNTRY country : COUNTRY.values()) {				if (country.code == code) {					return country.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value || "".equals(value)) {				return null;			}			for (COUNTRY country : COUNTRY.values()) {				if (country.value.equals(value)) {					return country.code;				}			}			return null;		}		public static Map<Integer, String> getEnumMap() {			if (map.size() == 0) {				for (COUNTRY country : COUNTRY.values()) {					map.put(country.code, country.value);				}			}			return map;		}	}	/**	 * 1,身份证:idcard<br>2,护照:passport	 **/	public enum IDTYPE {		NO("暂无", 0),		/**		 * 1,身份证:idcard		 **/		IDCARD("身份证", 1),		/**		 * 2,护照:passport		 **/		PASSPORT("护照", 2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private IDTYPE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (IDTYPE idtype : IDTYPE.values()) {				if (idtype.code == code) {					return idtype.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value || "".equals(value)) {				return null;			}			for (IDTYPE idtype : IDTYPE.values()) {				if (idtype.value.equals(value)) {					return idtype.code;				}			}			return null;		}		public static Map<Integer, String> getEnumMap() {			if (map.size() == 0) {				for (IDTYPE idtype : IDTYPE.values()) {					map.put(idtype.code, idtype.value);				}			}			return map;		}	}	/**	 * 0,关闭:close;1,开启:open	 **/	public enum GOOGLESTATE {		/**		 * 0,关闭:close		 **/		close("关闭", 0),		/**		 * 1,开启:open		 **/		open("开启", 1);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private GOOGLESTATE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (GOOGLESTATE googlestate : GOOGLESTATE.values()) {				if (googlestate.code == code) {					return googlestate.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value || "".equals(value)) {				return null;			}			for (GOOGLESTATE googlestate : GOOGLESTATE.values()) {				if (googlestate.value.equals(value)) {					return googlestate.code;				}			}			return null;		}		public static Map<Integer, String> getEnumMap() {			if (map.size() == 0) {				for (GOOGLESTATE googlestate : GOOGLESTATE.values()) {					map.put(googlestate.code, googlestate.value);				}			}			return map;		}	}	/**	 * 1,正常:normal<br>2,登录冻结:freeze<br>3,注销:logout;4,注册未完成:regist_unfinished;5,未支付:unpaid	 **/	public enum STATE {		/**		 * 1,正常:normal		 **/		NORMAL("正常", 1),		/**		 * 2,登录冻结:freeze		 **/		FREEZE("登录冻结", 2),		/**		 * 3,注销:logout		 **/		LOGOUT("注销", 3),		/**		 * 4,注册未完成:REGIST_UNFINISHED		 **/		REGIST_UNFINISHED("注册未完成", 4),		/**		 * 5,未支付:unpaid		 **/		UNPAID("未支付", 5);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private STATE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) {					return state.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value || "".equals(value)) {				return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) {					return state.code;				}			}			return null;		}		public static Map<Integer, String> getEnumMap() {			if (map.size() == 0) {				for (STATE state : STATE.values()) {					map.put(state.code, state.value);				}			}			return map;		}	}	/**	 * 1,男:male<br>2,女:female<br>3,保密:secret	 **/	public enum SEX {		/**		 * 1,男:male		 **/		MALE("男", 1),		/**		 * 2,女:female		 **/		FEMALE("女", 2),		/**		 * 3,保密:secret		 **/		SECRET("保密", 3);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<>();		private SEX(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (Admin.SEX sex : Admin.SEX.values()) {				if (sex.code == code) {					return sex.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value || "".equals(value)) {				return null;			}			for (Admin.SEX sex : Admin.SEX.values()) {				if (sex.value.equals(value)) {					return sex.code;				}			}			return null;		}		public static Map<Integer, String> getEnumMap() {			if (map.size() == 0) {				for (Admin.SEX sex : Admin.SEX.values()) {					map.put(sex.code, sex.value);				}			}			return map;		}	}}